#%TITLE% LimaRoiCnt.mac
#%NAME%  
#  Roi counter for Lima
#
#%CATEGORY% Macro counters
#%DESCRIPTION%
# This set of macro are used to control roi counter with Lima devices servers
#%SETUP%
# You have to declare a LimaRoiCnt Controler per device. In this controler you have to set url (tango device name)
#
#%IU%
#%MDESC%
#
def LimaRoiCnt_config(cntnum, type, unit, module, channel) '{

    global LimaRoiCnt_PAR[]
    global LimaRoiController_PAR[]

    if (cntnum == "..")
      {
        local arr_name
        arr_name = sprintf("LimaRoiCnt_%d_RESULT",unit)
        global @arr_name[]
        LimaRoiController_PAR[unit]["dirty_flag"] = 1
        LimaRoiController_PAR[unit]["nbcounters"] = 0
      }
    else
    {
      local url counter_id
      counter_id = LimaRoiController_PAR[unit]["nbcounters"]
      LimaRoiController_PAR[unit][counter_id] = cntnum
      LimaRoiController_PAR[unit]["nbcounters"] += 1
      LimaRoiCnt_PAR[cntnum]["unit"] = unit
      url = counter_par(cntnum,"url")
      if(url == 1)
        print "Counter controler of unit: " unit " should have an url (go in the config and press p)"
      else
        {
          LimaRoiController_PAR[unit]["url"] = url
          tango_io(url,"Start")
        }
 
    }
}'


#%IU%
#%MDESC%

#    This function is called by SPEC with the keys to start counters
#    in response to commands:
# tcount() -> count to a preset time.
# mcount() -> count to a monitor preset.
# move_cnt -> count until the counters are halted.

def LimaRoiCnt_cmd(cntnum, key, p1, p2, unit ) '{
    if (cntnum == "..")
    {
        # for key applying to all counters

        if (key == "prestart_all")
        {
          local arr_name
          arr_name = sprintf("LimaRoiCnt_%d_RESULT",unit)
          @arr_name[0] = 0
          local url device_status cnt_id
          url = LimaRoiController_PAR[unit]["url"]
          device_status = tango_io(url,"State")
          if(device_status || LimaRoiController_PAR[unit]["dirty_flag"])
            {
              #Init all roi
              local nb_roi i cmd[] cmdindex
              cmdindex = 0
              nb_roi = LimaRoiController_PAR[unit]["nbcounters"]
              for(i = 0; i < nb_roi;++i)
                {
                  cnt_id = LimaRoiController_PAR[unit][i]
                  cmd[cmdindex++] = LimaRoiCnt_PAR[cnt_id]["x"]
                  cmd[cmdindex++] = LimaRoiCnt_PAR[cnt_id]["y"]
                  cmd[cmdindex++] = LimaRoiCnt_PAR[cnt_id]["width"]
                  cmd[cmdindex++] = LimaRoiCnt_PAR[cnt_id]["height"]
                  LimaRoiCnt_PAR[cnt_id]["roiId"] = i
                }            
              LimaRoiController_PAR[unit]["dirty_flag"] = 0
              tango_io(url,"set",cmd)
            }
        }
        else if(key == "halt_all")
        {
          local url
          url = LimaRoiController_PAR[unit]["url"]
          #Check if acquisition stated
          local roi_cnt_status arr_name
          arr_name = sprintf("LimaRoiCnt_%d_RESULT",unit)
          roi_cnt_status = tango_get(url,"CounterStatus")
          while(roi_cnt_status > -2 && @arr_name[0] == 0) #Acquisition started
            tango_io(url,"readCounters",0,@arr_name)
          tango_io(url,"Start")
        }
    }
    else
    {

        if (key == "counts") 
        {
            local roiId tableIndex cnt_type val arr_name
            arr_name = sprintf("LimaRoiCnt_%d_RESULT",unit)
            if(@arr_name[0])
            {
              roiId = LimaRoiCnt_PAR[cntnum]["roiId"]
              cnt_type = LimaRoiCnt_PAR[cntnum]["type"]
              tableIndex = 2 + roiId * 4 + cnt_type
              val = @arr_name[tableIndex]
            }
            else
              val = 0
            return val
        }
        else if (key == "get_status")
        {
                return 0 #no master counter/timer
        }
    }
}'
#%MACROS%
#%IMACROS%
#%AUTHOR%
# macro counter template : C.Guilloud


## Helper

def lima_roi_show '{
  local value writeFlag
  if($# == 1)
    writeFlag = 1
  else
    writeFlag = 0
  for(value in LimaRoiController_PAR)
  {
    local split_result nb
    nb = split(value,split_result,"\034")
    if(nb == 2 && split_result[1] == "nbcounters")
    {
      local unit nb_counter
      unit = split_result[0]
      nb_counter = LimaRoiController_PAR[unit]["nbcounters"] 
      local counter_id lid cmd
      cmd = ""
      for(lid = 0;lid < nb_counter;++lid)
      {
        counter_id = LimaRoiController_PAR[unit][lid]
        local x y width height cnt_type cnt_type_str
        x = LimaRoiCnt_PAR[counter_id]["x"]
        y = LimaRoiCnt_PAR[counter_id]["y"]
        width = LimaRoiCnt_PAR[counter_id]["width"]
        height = LimaRoiCnt_PAR[counter_id]["height"]
        cnt_type = LimaRoiCnt_PAR[counter_id]["type"]
        cnt_type_str = _lima_type_2_str(cnt_type) 
        if(writeFlag)
          print counter_id " " x " " y " " width " " height " " cnt_type_str 
        else
          print cnt_name(counter_id) " " cnt_type_str " of (" x "," y "," width "," height ")" 
      } 
    }
  }
}'
#%IU%
#%MDESC%
# this macro set roi counter. 
# parameters are: roi_cnt_name x y width height cnt_type
# cnt_type can be :
# 0 -> Sum
# 1 -> Average
# 2 -> Std
def lima_roi_set '{
  local cnt_type
  if($# < 5)
  {
    print "lima_roi_set <roi_cnt> <x> <y> <width> <height> [cnt_type]"
    return
  }
  else if($# == 6)
    cnt_type = _lima_str_2_type("$6")
  else
   cnt_type = 0  #type Sum

  _lima_roi_set($1,$2,$3,$4,$5,cnt_type)
}'

def _lima_roi_set(cnt_id,x,y,width,height,cnt_type) '{ 
  # first check that the conter is a roi
  if(counter_par(cnt_id,"device_id") != "LimaRoiCnt")
  {
    print "counter must be a roi counter"
    return
  }
  LimaRoiCnt_PAR[cnt_id]["x"] = x
  LimaRoiCnt_PAR[cnt_id]["y"] = y
  LimaRoiCnt_PAR[cnt_id]["width"] = width
  LimaRoiCnt_PAR[cnt_id]["height"] = height
  LimaRoiCnt_PAR[cnt_id]["type"] = cnt_type
  #Set DirtyFlag
  unit = counter_par(cnt_id,"unit")
  LimaRoiController_PAR[unit]["dirty_flag"] = 1
}'
#%UU% [<filename>]
#%MDESC% Save rois definition in a file. If <filename> is not specified, 
# save to the standard location
#
def lima_roi_save '{
  local filename
  if($#==1)
    filename = "$1"
  else
    filename = sprintf("%s/local/spec/userconf/limaroi.def.%s",BLISSADM,USER)

  if(!unix(sprintf("test -r %s",filename)))
    unix(sprintf("/bin/rm -f %s",filename))

  if(on(filename) == -1)
    print "Error : Cannot open file " filename
  else
  {
    offt
    printf("# -------- Lima Rois --------\n")
    printf("# name x y width height type\n")
    lima_roi_show 1
    ont
    close(filename)
    print "Roi : Saved to " filename 
  }
}'

#%UU% [<filename>]
#%MDESC% Load rois from a file. If <filename> is not specified, load from the 
# standard location
#%BR% Loading rois from file will erase current roi settings.
def lima_roi_load '{
  local filename
  if($# == 1)
    filename = "$1"
  else
    filename = sprintf("%s/local/spec/userconf/limaroi.def.%s",BLISSADM,USER)  
  
  if(unix(sprintf("test -r %s",filename)))
    print "Error : Cannot find file " filename
  else
  {
    local line pars[]
    for(line = getline(filename);line != -1;line = getline(filename))
    {
      if(substr(line,0,1) == "#") continue
      if(split(line,pars) == 6)
      {
        local tmpType
        tmpType = pars[5]
        tmpType = substr(tmpType,0,length(tmpType) - 1)
        tmpType = _lima_str_2_type(tmpType)
        _lima_roi_set(pars[0],pars[1],pars[2],pars[4],pars[4],tmpType)
      }
    }
    close(filename)
  } 
}'
def _lima_type_2_str(cnt_type) '{
  if(cnt_type == 1)
    return "Average"
  else if(cnt_type == 2)
    return "Std"
  else
    return "Sum"
}'

def _lima_str_2_type(str_type) '{
  if(str_type == "Average")
    return 1
  else if(str_type == "Std")
    return 2
  else if(str_type == "Sum")
    return 0
  else
  {
    print "Possible value of cnt_type are: Average,Std and Sum"
    exit
  }
}'
