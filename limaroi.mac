#%TITLE% limaroi.mac
#%NAME% LIMA CCD ROI pseudo counters
#%DESCRIPTION%
# Implements ROIs as pseudo counters for LIMA CCD
#
#
#%END%

#%CATEGORY% Detection, Ccd

#%LOG%
#
#$Revision: 1.3 $
#$Log: limaroi.mac,v $
#Revision 1.3  2010/12/10 15:50:22  papillon
#* correct xy orientation
#
#Revision 1.2  2010/11/22 14:56:46  claustre
#added RCS tags + woraround in limampx to force spec resync. on image format
#change
#


#%IU% ()
#%MDESC%
# Initialise associative array %B%LIMA_ROI%B% and create user_getcounts cdef
#
def _limaroi_init() '{
  global LIMA_ROI[]
  if (list_n(LIMA_ROI)<0)
    list_init LIMA_ROI
	cdef("user_getcounts", "_limaroi_getcounts\n", "limaroi", 0x10)
}'

def user_limaroi_add '#$*'
def user_limaroi_remove '#$*'

#%UU% <ccdname> <roimne> <xbeg> <xend> <ybeg> <yend> 
#%MDESC% 
# Add or Modify a ROI
#
def limaroiadd '{
  if ($#!=7) {
    print "Usage: $0 <ccdname> <roimne> <roitype> <xbeg> <xend> <ybeg> <yend>"
    exit
  }
	_limaroi_add("$1", "$2", $3, $4, $5, $6, $7)
}'

#%IU% (ccdname, mne, xmin, xmax, ymin, ymax)
#%MDESC% 
# Add or Modify a ROI
#
def _limaroi_add(ccdname, roimne, roitype, xmin, xmax, ymin, ymax) '{

  _limaroi_init()
   
	if (list_item(LIMA_ROI, roimne)==-1) 
		list_add(LIMA_ROI, roimne)

	LIMA_ROI[roimne]["ccdname"]= ccdname
  LIMA_ROI[roimne]["type"]= roitype
	LIMA_ROI[roimne]["xmin"]= xmin
	LIMA_ROI[roimne]["xmax"]= xmax
	LIMA_ROI[roimne]["ymin"]= ymin
	LIMA_ROI[roimne]["ymax"]= ymax

  _limaroi_server_update(ccdname)
  user_limaroi_add ccdname roimne
}'

#%UU% <roimne>
#%MDESC%
# Remove the specified ROI
#
def limaroiremove '{
  local roimne

  if ($#!=1) {
    print "Usage: $0 <roimne>"
    exit
  }
  roimne= "$1"

  if (list_check(LIMA_ROI, roimne)<=0) {
    _lima_error ; printf("Unknown ROI <%s>\n", roimne)
  } else {
    _limaroi_remove(roimne)
  }
}'

#%IU% (roimne)
#%MDESC%
#  Remove the specified ROI
#
def _limaroi_remove(roimne) '{
  local roinum ccdname

  ccdname= LIMA_ROI[roimne]["ccdname"]

  list_remove(LIMA_ROI, roimne)
  if ((roinum= cnt_num(roimne))!=-1) {
    S[roinum]= 0
  }
  _limaroi_server_update(ccdname)
  user_limaroi_remove ccdname roimne
  if (list_n(LIMA_ROI)<1) {
    cdef("", "", "limaroi", "delete")
  }
}'

#%UU% <ccdname>
#%MDESC%
# Remove all ROIs for CCD <ccdname>
#%BR% If <ccdname> == %B%*%B%, remove all ROIs for all CCDs
#
def limaroireset '{
  local ccdname
  if ($#!=1) {
    print "Usage: $0 <ccdname>"
    print "  If <ccdname>=="*", remove rois for all ccds"
    exit
  }
  ccdname= "$1"
  if ((ccdname != "*")&&(list_check(LIMA_DEV, ccdname)<=0)) {
      _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_reset(ccdname)
  }
}'
  
#%IU% (ccdname)
#%MDESC% 
# Remove all ROIs for CCD <ccdname>
#%BR% If <ccdname> == %B%*%B%, remove all ROIs for all CCDs
#
def _limaroi_reset(ccdname) '{
  local iroi roimne roinum roiccd
  local delroi[] nroi

  if (ccdname=="*") {
    for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
      roimne= list_item(LIMA_ROI, iroi)
      if ((roinum=cnt_num(roimne)) != -1) {
        S[roinum]= 0
      }
      roiccd= LIMA_ROI[roimne]["ccdname"]
      if (roiccd!=ccdname) {
        ccdname= roiccd
        _limaroi_server_update(ccdname)
      }
      user_limaroi_remove roiccd roimne
    }
    list_init LIMA_ROI
  } else {
     nroi= 0
     for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
      roimne= list_item(LIMA_ROI, iroi)
      if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
        delroi[nroi++]= roimne
        if ((roinum=cnt_num(roimne)) != -1) {
          S[roinum]= 0
        }
      }
    }
    for (iroi=0; iroi<nroi; iroi++) {
      list_remove(LIMA_ROI, delroi[iroi])
      user_limaroi_remove ccdname delroi[iroi]
    }
    if (nroi) {
      _limaroi_server_update(ccdname)
    }
  }
  if (list_n(LIMA_ROI)<1) {
    cdef("", "", "limaroi", "delete")
  }
}'

#%UU% <old_mne> <new_mne>
#%MDESC%
# Rename the ROI <old_mne> to <new_mne> keeping same ROI parameters
#
def limaroirename '{
  local oldmne newmne
  if ($#!=2) {
    print "Usage: $0 <old_mne> <new_mne>"
    exit
  }
  oldmne= "$1"
  newmne= "$2"
  if (list_check(LIMA_ROI, oldmne)<=0) {
    _lima_error ; printf("Unknown ROI <%s>\n", oldmne)
  } else {
    _limaroi_rename(oldmne, newmne)
  }
}' 

#%IU% (old_mne, new_mne)
#%MDESC%
# Rename the ROI <old_mne> to <new_mne> keeping same ROI parameters
#
def _limaroi_rename(oldmne, newmne) '{
	_limaroi_add(LIMA_ROI[oldmne]["ccdname"], newmne, LIMA_ROI[oldmne]["type"], \
               LIMA_ROI[oldmne]["xmin"], LIMA_ROI[oldmne]["xmax"], \
	             LIMA_ROI[oldmne]["ymin"], LIMA_ROI[oldmne]["ymax"])
	_limaroi_remove(oldmne)
}'

#%IU%
#%MDESC% 
# sum counts over ROI into corresponding spec counter.
def _limaroi_getcounts '{
	local iroi roimne roinum
  local ccdname ccdunit arrname
	local xi xa yi ya
  local val npix

  for (iroi= 1; iroi<=list_n(LIMA_ROI); iroi++) {
    roimne= list_item(LIMA_ROI, iroi)
    roinum= cnt_num(roimne)
    ccdname= LIMA_ROI[roimne]["ccdname"]
    ccdunit= LIMA_DEV[ccdname]["unit"]
    if ((CCD_ON[ccdunit])&&(roinum!=-1)&&(counter_par(roinum, "disable")!=1)) {
      arrname= sprintf("image_data%d", ccdunit)
      roitype= LIMA_ROI[roimne]["type"] 
      xi= LIMA_ROI[roimne]["xmin"]
      xa= LIMA_ROI[roimne]["xmax"]
      yi= LIMA_ROI[roimne]["ymin"]
      ya= LIMA_ROI[roimne]["ymax"]
      val= array_op("sum", @arrname[yi:ya][xi:xa])
      if (roitype>0) {
          npix= array_op("rows", @arrname)*array_op("cols", @arrname)
          if (npix!=0) val= val / npix
      }
      if (roitype==2) {
          val= array_op("sumsq", @arrname - val)
          if (npix!=0) val= val / npix
      }
      S[roinum]= val
    }
  }
}'

#%UU% [<ccdname>]
#%MDESC%
# Show a menu allowing all modification on ROIs settings
#
def limaroi '{
  local ccdname

  ccdname= ($#==1) ? "$1" : 0
  if (ccdname) {
    if (list_check(LIMA_DEV, ccdname)<=0) {
      _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
    } else {
      _limaroi_menu(ccdname)
    }
  } else {
    if (list_n(LIMA_DEV)==1) {
      idev= 1
    } else {
      for (idev=1; idev<=list_n(LIMA_DEV); idev++) {
        ccdname= list_item(LIMA_DEV, idev)
        printf(" (%d) %s (%s, %s)\n", idev, ccdname, \
              LIMA_DEV[ccdname]["control"], LIMA_DEV[ccdname]["config"])
      }
      idev= getval(" >> Select one CCD", 0)
    }
    if ((idev>0)&&(idev<=list_n(LIMA_DEV)))
      _limaroi_menu(list_item(LIMA_DEV, idev))
  }
}'
      
#%IU% (ccdname)
#%MDESC% 
# Menu to Add/Modify/Delete/Save/Load ROIs of CCD <ccdname>
#
def _limaroi_menu(ccdname)'{
  local nb key
  local cmne roitype xmin xmax ymin ymax
  local ccdunit arrname
	local file

  ccdunit= LIMA_DEV[ccdname]["unit"]
  arrname= sprintf("image_data%d", ccdunit)

	while (1) {
		nb= _limaroi_show(ccdname)
		tty_move(0,nb++, "\[md\]A\[se\]dd/\[md\]R\[se\]emove/\[md\]M\[se\]odify ROI(s),") 
		tty_move(0,nb++, "\[md\]L\[se\]oad from/\[md\]S\[se\]ave to file,  or \[md\]Q\[se\]uit (0)? ")

		while ((key=input(-1))=="") {}
		key=substr(key,1,1)
		printf("\n\n")

		if (key=="q"||key=="Q"||asc(key)==10) break
		else if (key=="r"||key=="R") {
			cmne= getval("Counter mnemonic",0)
			if (cmne!="0") {
        if (cmne=="*")
          _limaroi_reset(ccdname)
        else
          _limaroi_remove(cmne)
      }
		}
		else if (key=="a"||key=="A") {
			cmne= getval(" > Counter mnemonic    ", 0)
			if (cmne) {
				xmax= array_op("cols", @arrname)-1
				ymax= array_op("rows", @arrname)-1
        roitype= getval(" > Roi type [0=SUM, 1=AVG, 2=STD]", 0)
				xmin= getval(" > X min  ", 0)
				xmax= getval(" > X max  ", xmax)
				ymin= getval(" > Y min  ", 0)
				ymax= getval(" > Y max  ", ymax)
				_limaroi_add(ccdname, cmne, roitype, xmin, xmax, ymin, ymax)
			}
		}
		else if (key=="m"||key=="M") {
			cmne= getval(" > Counter mnemonic       ", 0)
			if (list_check(LIMA_ROI, cmne)>0) {
        roitype= getval(" > Roi type [0=SUM, 1=AVG, 2=STD]", LIMA_ROI[cmne]["type"])
				xmin= getval(" > X min          ", LIMA_ROI[cmne]["xmin"])
				xmax= getval(" > X max          ", LIMA_ROI[cmne]["xmax"])
				ymin= getval(" > Y min          ", LIMA_ROI[cmne]["ymin"])
				ymax= getval(" > Y max          ", LIMA_ROI[cmne]["ymax"])
				_limaroi_add(ccdname, cmne, roitype, xmin, xmax, ymin, ymax)
			}
		}
		else if (key=="s"||key=="S") {
			file= getval("Save ROIs to file [0:default file]", 0)
			if (file=="0") {
        _limaroi_save(ccdname, 0)
			} else {
        _limaroi_save(ccdname, file)
      }
			input("... Press Enter ...")
		}
		else if (key=="l"||key=="L") {
			file= getval("Load ROIs from file [0:default file]", 0)
			if (file=="0") {
        _limaroi_load(ccdname, 0)
      } else {
        _limaroi_load(ccdname, file)
      }
			input("... Press Enter ...")
		}
	}
}'

#%IU% (ccdname)
#%MDESC%
# Shows ROIs definition for CCD <ccdname>
#
def _limaroi_show(ccdname) '{
  local iroi nb roimne
	local cmne roitype xmin xmax ymin ymax status

  _limaroi_init()

	clscreen()
	tty_move(10,0,sprintf("\[md\]< LIMA ROI on %s >\[me\]", ccdname))
	tty_move(0,2,"           Counter Type    Xmin   Xmax   Ymin   Ymax.")
    
	nb= 3
	for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
		roimne= list_item(LIMA_ROI, iroi)
    if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
      roitype= "SUM"
      if (LIMA_ROI[roimne]["type"]==1) {
         roitype= "AVG"
      } else if (LIMA_ROI[roimne]["type"]==2) {
         roitype= "STD"
      }
		  xmin= LIMA_ROI[roimne]["xmin"]
		  xmax= LIMA_ROI[roimne]["xmax"]
		  ymin= LIMA_ROI[roimne]["ymin"]
		  ymax= LIMA_ROI[roimne]["ymax"]
      status = (cnt_num(roimne)==-1)?"    Not in config !!!":""
		  tty_move(0, nb++, sprintf("\[md\]%18s  %3s  %6d %6d %6d %6d\[me\] %s", \
				                roimne, roitype, xmin, xmax, ymin, ymax, status))
    }
	}
	tty_move(0,nb++,"--------------------------------------------------------")
	nb++
	return (nb)
}'


#%UU% <ccdname> [<filename>]
#%MDESC% 
# Save ROIs definition of CCD <ccdname> in a file. 
#%BR% If <filename> is not specified, save to the standard location
#
def limaroisave '{
	local filename mne roi
  
  if (($#!=1)&&($#!=2)) {
    print "Usage: $0 <ccdname> [<filename>]"
    exit
  }
  ccdname= "$1"
  filename= ($#==2) ? "$2" : 0

  if (list_check(LIMA_DEV, ccdname)<=0) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_save(ccdname, filename)
  }
}'

#%IU% (ccdname, filename)
#%MDESC% 
# Save ROIs definition of CCD <ccdname> in a file. 
#%BR% If <filename>==0, save to the standard location
#
def _limaroi_save(ccdname, filename) '{
  if (!filename) {
    file= sprintf("%s/local/spec/userconf/limaroi_%s.def.%s", BLISSADM, ccdname, USER)
  } else {
    file= filename
  }
  if (file_info(file, "-e")) {
    unix(sprintf("/bin/rm -f %s", file))
  }

  if (on(file)==-1) {
    _lima_error ccdname ; printf("Cannot open file <%s>\n", file)
  } else {
    offt
    printf("# LIMA ROI %s\n", ccdname)
    printf("# name xmin xmax ymin ymax\n")
    for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
      roimne= list_item(LIMA_ROI, iroi)
      if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
        printf("%s %d %d %d %d %d \n", roimne, LIMA_ROI[roimne]["type"], \
              LIMA_ROI[roimne]["xmin"], LIMA_ROI[roimne]["xmax"], \
              LIMA_ROI[roimne]["ymin"], LIMA_ROI[roimne]["ymax"])
      }
    }
    ont; close(file)
    _lima_trace ccdname ; printf("Saved ROIs to <%s>\n", file)
  }
}'

#%UU% <ccdname> [<filename>]
#%MDESC% 
# Load ROIs definition for CCD <ccdname> from a file. 
#%BR% If <filename> is not specified, save to the standard location
#%BR% Loading rois from file will erase current roi settings.
#
def limaroiload '{
	local ccdname filename
  
  if (($#!=1)&&($#!=2)) {
    print "Usage: $0 <ccdname> [<filename>]"
    exit
  }
  ccdname= "$1"
  filename= ($#==2) ? "$2" : 0
  
  if (list_check(LIMA_DEV, ccdname)<=0) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_load(ccdname, filename)
  }
}'

#%IU% (ccdname, filename)
#%MDESC%
# Load ROIs definition for CCD <ccdname> from a file. 
#%BR% if <filename>==0, save to the standard location
# 
def _limaroi_load(ccdname, filename) '{
  local file nroi line
  local roimne roitype xmin xmax ymin ymax

  if (!filename) {
    file= sprintf("%s/local/spec/userconf/limaroi_%s.def.%s", BLISSADM, ccdname, USER)
  } else {
    file= filename
  }
  if (!file_info(file, "-e")) {
    _lima_error ccdname ; printf("Cannot find file <%s>\n", file)
  } else {
    _limaroi_reset(ccdname)
    nroi= 0

    for (line= getline(file); line!=-1; line=getline(file)) {
      if (substr(line, 0, 1)=="#")
        continue
      if (sscanf(line, "%s %d %d %d %d %d", roimne, roitype, xmin, xmax, ymin, ymax)==6) {
        _limaroi_add(ccdname, roimne, roitype, xmin, xmax, ymin, ymax)
        nroi++
      } else {
        _lima_error ccdname ; printf("Wrong parameters on line <%s>\n", line)
      }
    }
    getline(file, "close")
    _lima_trace ccdname ; printf("%d ROIs loaded from <%s>\n", nroi, file)
  }
}'

# -----------------------------------------------------------------------------

def limaroiserver '{
  global LIMA_ROI_SRV[]
  local ccdname roisrv

  if (list_n(LIMA_ROI_SRV)<0)
    list_init LIMA_ROI_SRV

  if ($# != 2) {
    print "Usage: $0 <ccdname> <roicounter_device>"
    exit
  }

  ccdname= "$1"
  roisrv= "$2"

  if (list_check(LIMA_DEV, ccdname)<=0) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    list_add(LIMA_ROI_SRV, ccdname)
    LIMA_ROI_SRV[ccdname]["device"]= roisrv
    LIMA_ROI_SRV[ccdname]["nroi"]= 0
    _limaroi_server_send(ccdname)
  }
}'

def _limaroi_server_update(ccdname) '{
  if (_limaroi_server_defined(ccdname))
    _limaroi_server_send(ccdname)
}'

def _limaroi_server_defined(ccdname) '{
  if (list_getpar(LIMA_ROI_SRV, ccdname, "device")!=-1)
    return (1)
  else
    return (0)
}'

def _limaroi_server_send(ccdname) '{
  local nroi iroi roimne sendroi[] roi_id[]
  local xmin xmax ymin ymax
  local state srv

  srv= list_getpar(LIMA_ROI_SRV, ccdname, "device")
  if (srv==-1)
    return (-1)

  nroi= 0
  for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
    roimne= list_item(LIMA_ROI, iroi)
    if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
      sendroi[nroi++]= roimne
    }
  }

  tango_io(srv,"add",sendroi,roi_id)

  if (nroi) {
    local long array argroi[5*nroi]

    for (iroi=0; iroi<nroi; iroi++) {
      roimne= sendroi[iroi]
		  xmin= LIMA_ROI[roimne]["xmin"]
		  xmax= LIMA_ROI[roimne]["xmax"]
		  ymin= LIMA_ROI[roimne]["ymin"]
		  ymax= LIMA_ROI[roimne]["ymax"]

      argroi[5*iroi + 0]= roi_id[iroi]
      argroi[5*iroi + 1]= (xmax>xmin) ? xmin : xmax
      argroi[5*iroi + 2]= (ymax>ymin) ? ymin : ymax
      argroi[5*iroi + 3]= fabs(xmax-xmin)+1
      argroi[5*iroi + 4]= fabs(ymax-ymin)+1

      LIMA_ROI_SRV[ccdname][roi_id[iroi]]= roimne
    }
    LIMA_ROI_SRV[ccdname]["nroi"]= nroi
    # TODO 
    #LIMA_ROI_SRV[ccdname]["roi_id"]

    state= tango_get(srv, "State")
    if (state!=0) {
      tango_io(srv, "Start")
    }
    tango_io(srv, "setRoi", argroi)
  }

  return (nroi)
}'

def _limaroi_server_reset(ccdname) '{
  local srv
  srv= list_item(LIMA_ROI_SRV, ccdname, "device")
  if (srv!=-1) {
    tango_io(srv, "Stop")
    LIMA_ROI_SRV[ccdname]["nroi"]= 0
  }
}'

def _limaroi_server_initarr(ccdname, maxpt) '{
  local iroi roiarr nroi

  nroi= LIMA_ROI_SRV[ccdname]["nroi"]
  if (nroi) {
    for (iroi=0; iroi<nroi; iroi++) {
      roiarr= sprintf("ROICNT_%s_%s", ccdname, LIMA_ROI_SRV[ccdname][iroi])
      double array @roiarr[maxpt][5]
      @roiarr[:][:]= 0.
    }
    roiarr= sprintf("ROICNT_READ_%s", ccdname)
    # roi_id/frame_nb/sum/avg/std/min/max --> 7 values
    double array @roiarr[1+(nroi*7*maxpt)]
  }
  return (nroi)
}'

def _limaroi_server_read(ccdname, frompt) '{
  local nroi rois[] iroi 
  local readarr roiarr offset
  local iframe nframe lastpt lastrd
  local srv frame_num niter

  srv= list_getpar(LIMA_ROI_SRV, ccdname, "device")
  if (srv==-1)
    return (-1)

  nroi= LIMA_ROI_SRV[ccdname]["nroi"]
  if (nroi) {
    lastpt= tango_get(srv, "CounterStatus")
    if (lastpt > frompt) {
      readarr= sprintf("ROICNT_READ_%s", ccdname)
      elnb = tango_io(srv, "readCounters", (frompt==-1?0:frompt), @readarr)

      # new command returns rois as a list of roi result for each frame by roi:
      # e.g for 2 rois and 3 frames:
      #result[0]  --> roi id 0
      #result[1] --> frame 0 (or frompt)
      #result[2:6] --> sum/avg/std/min/max
      #result[7] --> roi id 0
      #result[8[ --> frame 1 (or frompt+1)
      #result[9:13] --> sum/avg/std/min/max
      #resut[14] --> roi id 0
      #result[15] --> frame 2
      #result[16:20] --> sum/avg/std/min/max
      #resut[21] --> roi id 1
      #result[22] --> frame 0      
      #....
      
      # 7 values for each frame (roi_id/frame_nb/sum/avg/std/min/max) times nroi
      niter = elnb/7
      nframe= elnb/7/nroi
      lastrd = frompt  
      for(i = 0;i < niter;i += 7)
      {
         local roi_id frame_id sum avg std minVal maxVal
	 roi_id = @readarr[i]
	 frame_id = @readarr[i + 1]
         if(frame_id > lastrd)
	    lastrd = frame_id 
	 roiarr= sprintf("ROICNT_%s_%s", ccdname, LIMA_ROI_SRV[ccdname][roi_id])
	 @roiarr[frame_id][0:4] = @readarr[i+2:i+6]
      }
    }
    lastrd= (lastrd > 0) ? lastrd : 0
    return (lastrd)
  } else {
    return (0)
  }
}'


#%MACROS%
#%IMACROS%
#%TOC%
#%AUTHOR% E.Papillon, $Revision: 1.3 $, $Date: 2010/12/10 15:50:22 $
